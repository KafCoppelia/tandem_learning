from copy import deepcopy
from collections import OrderedDict
# from operators import Hardware
from hwConfig import Hardware
from hwConfig import DataFrame
from frame import Frame
from utils import multiCast, getStar
import pickle
import json
import math
import os
import numpy as np

from frame import Frame

'''-----------------------------------------------------------------------'''
'''              load configs (generated by hardwareNet)                  '''
'''-----------------------------------------------------------------------'''


def genConfig(info, mapping):
    coreNum = 0
    if mapping is not None:
        cores = list(mapping.values())
        cores.sort()
    else:
        cores = list()
        for localPlaceId, placeConfig in info['localPlace'].items():
            cores += list(placeConfig.keys())
        cores += list(info['relay'].keys())
        cores.sort()
    print(f"[info] use {len(cores)} cores: {cores}")

    configs = dict()
    # maxTime = dict()
    # baseOnlineCores = list()
    # lateralStars = list()
    # onlineSets = set()

    for coreId in cores:
        configs[coreId] = dict()
        configs[coreId]['core'] = None
        configs[coreId]['LUT'] = list()
        configs[coreId]['neuron'] = dict()
    mask = (1 << 5) - 1
    for localPlaceId, placeConfig in info['localPlace'].items():
        for coreId, coreConfig in placeConfig.items():   
            isOffline = len(coreConfig['LUT']) == 0
            if mapping is not None:
                coreAddr = int(mapping[coreId])
            else:
                coreAddr = coreId
            coreY = coreAddr & mask
            coreX = (coreAddr >> 5) & mask
            chipY = (coreAddr >> 10) & mask
            chipX = (coreAddr >> 15) & mask
            configs[coreAddr]['core'] = coreConfig['core']
            configs[coreAddr]['LUT'] = coreConfig['LUT']
            # if isOffline:
            #     maxTime[coreAddr] = coreConfig['core'][6] + coreConfig['core'][7] - 1
            # else:
            #     maxTime[coreAddr] = coreConfig['core'][10] + coreConfig['core'][11] - 1
            assert coreConfig['core'] is not None

            if not isOffline:
                lateralStar = coreConfig['core'][8]
                lateralCores = multiCast(coreId, lateralStar, Hardware.COREBIT, mapping)
                star = getStar(lateralCores)
                configs[coreAddr]['core'][8] = (star >> Hardware.COREY) & mask
                configs[coreAddr]['core'][9] = star & mask
                # if len(lateralCores & onlineSets) == 0:
                #     onlineSets |= lateralCores
                #     baseOnlineCores.append(coreAddr)
                #     lateralStars.append(star)

            for neuronId, neuronConfig in coreConfig['neuron'].items():
                para = neuronConfig['parameter']
                destAxonId = para[1]
                destCoreId = para[2]
                destStarId = para[3]
                isOutput = False
                if destCoreId < 0:
                    destCoreId = -destCoreId
                    isOutput = True
                if not isOutput:
                    destCores = multiCast(destCoreId, destStarId, Hardware.COREBIT, mapping)
                    if mapping is not None:
                        baseCoreAddr = mapping[destCoreId]
                    else:
                        baseCoreAddr = destCoreId
                    star = getStar(destCores)
                    # star = 0
                    # for core in destCores:
                    #     destCoreAddr = mapping[core]
                    #     star |= (destCoreAddr ^ baseCoreAddr)
                    if mapping is not None:
                        destCoreAddr = mapping[destCoreId]
                    else:
                        destCoreAddr = destCoreId
                else:
                    # offset = (fullDest - Hardware.OUTPUTBEG)
                    # coreOff = Hardware.getSlotId(offset)
                    # axonOff = Hardware.getAxonId(offset)
                    # baseCoreAddr = coreOff + outputCoreBase
                    baseCoreAddr = destCoreId
                    # para[1] = axonOff
                    star = 0
                
                para[2] = (baseCoreAddr >> 5) & mask
                para[3] = baseCoreAddr & mask
                para[4] = (star >> 5) & mask
                para[5] = star & mask
                para[6] = (baseCoreAddr >> 15) & mask
                para[7] = (baseCoreAddr >> 10) & mask

                
                configs[coreAddr]['neuron'][neuronId] = {
                    'parameter': para,
                    'weight' : neuronConfig['weight']
                }

    for coreId, coreConfig in info['relay'].items():

        isOffline = len(coreConfig['LUT']) == 0
        if mapping is not None:
            coreAddr = mapping[coreId]
        else:
            coreAddr = coreId
        coreY = coreAddr & mask
        coreX = (coreAddr >> 5) & mask
        chipY = (coreAddr >> 10) & mask
        chipX = (coreAddr >> 15) & mask
        configs[coreAddr]['core'] = coreConfig['core']
        configs[coreAddr]['LUT'] = coreConfig['LUT']
        # if isOffline:
        #     maxTime[coreAddr] = coreConfig['core'][6] + coreConfig['core'][7] - 1
        # else:
        #     maxTime[coreAddr] = coreConfig['core'][10] + coreConfig['core'][11] - 1
        assert coreConfig['core'] is not None
        if not isOffline:
            lateralStar = coreConfig['core'][8]
            lateralCores = multiCast(coreId, lateralStar, Hardware.COREBIT, mapping)
            star = getStar(lateralCores)
            configs[coreAddr]['core'][8] = (star >> Hardware.COREY) & mask
            configs[coreAddr]['core'][9] = star & mask
            # if len(lateralCores & onlineSets) == 0:
            #     onlineSets |= lateralCores
            #     baseOnlineCores.append(coreAddr)
            #     lateralStars.append(star)
        for neuronId, neuronConfig in coreConfig['neuron'].items():
            para = neuronConfig['parameter']
            destAxonId = para[1]
            destCoreId = para[2]
            destStarId = para[3]
            isOutput = False
            if destCoreId < 0:
                destCoreId = -destCoreId
                isOutput = True
                assert False
            destCores = {destCoreId}
            fullDest = Hardware.getfullId2(destCoreId, destAxonId)
            if not isOutput:
                for i in range(10):
                    if (destStarId >> i) & 1:
                        tmpCores = deepcopy(destCores)
                        star = 1 << i
                        for core in tmpCores:
                            destCores.add(core ^ star)
                if mapping is not None:
                    baseCoreAddr = mapping[destCoreId]
                else:
                    baseCoreAddr = destCoreId
                star = 0
                for core in destCores:
                    if core == 1:
                        coreNum += 1
                    if mapping is not None:
                        destCoreAddr = mapping[core]
                    else:
                        destCoreAddr = core
                    star |= (destCoreAddr ^ baseCoreAddr)
                destCoreAddr = baseCoreAddr
            else:
                # offset = (fullDest - Hardware.OUTPUTBEG)
                # coreOff = Hardware.getSlotId(offset)
                # axonOff = Hardware.getAxonId(offset)
                # baseCoreAddr = coreOff + outputCoreBase
                assert False, "{:064b}".format(fullDest) + "\n" + "{:064b}".format(Hardware.OUTPUTBEG)
                baseCoreAddr = destCoreId
                # para[1] = axonOff
                star = 0
            para[2] = (baseCoreAddr >> 5) & mask
            para[3] = baseCoreAddr & mask
            para[4] = (star >> 5) & mask
            para[5] = star & mask
            para[6] = (baseCoreAddr >> 15) & mask
            para[7] = (baseCoreAddr >> 10) & mask
            configs[coreAddr]['neuron'][neuronId] = {
                'parameter': para,
                'weight' : neuronConfig['weight']
            }
    # return maxTime, baseOnlineCores, lateralStars, cores, configs
    return configs

def analyzeConfig(configs):
    
    maxTime = dict()
    baseOnlineCores = list()
    lateralStars = list()
    onlineModes = list()
    onlineSets = set()
    chipMaxTime = OrderedDict()

    for coreId, coreConfig in configs.items():
        isOffline = len(coreConfig['LUT']) == 0
        
        if isOffline:
            begTime = coreConfig['core'][6]
            duration = coreConfig['core'][7]
        else:
            begTime = coreConfig['core'][10]
            duration = coreConfig['core'][11]
        if begTime > 0 and duration > 0:
            maxTime[coreId] = begTime + duration - 1
        else:
            maxTime[coreId] = 0
        
        if not isOffline:
            lateralStar = coreConfig['core'][8] << Hardware.COREY + coreConfig['core'][9]
            lateralCores = multiCast(coreId, lateralStar, Hardware.COREBIT, None)
            if len(lateralCores & onlineSets) == 0:
                onlineSets |= lateralCores
                baseOnlineCores.append(coreId)
                lateralStars.append(lateralStar)
                onlineModes.append(coreConfig['core'][15])
    
    for core in configs.keys():
        chipId = core >> Hardware.COREBIT
        if chipId in chipMaxTime:
            if  maxTime[core] == 0:
                chipMaxTime[chipId] = (1 << 30) - 1
            else:
                chipMaxTime[chipId] = max(chipMaxTime[chipId], maxTime[core])
        else:
            chipMaxTime[chipId] = maxTime[core]
        
    return chipMaxTime, baseOnlineCores, lateralStars, onlineModes


'''-----------------------------------------------------------------------'''
'''                        gen config frames                              '''
'''-----------------------------------------------------------------------'''

def genConfigFrames(info, mapping, maxNeuronNum, frameDir):
    configs = genConfig(info, mapping)
    return genConfigFramesRaw(configs, maxNeuronNum, frameDir)

def genConfigFramesRaw(configs, maxNeuronNum, frameDir):
    configPath = os.path.join(frameDir, "config.txt")
    cfile = open(configPath,'w')

    offlineCores = list()
    onlineCores = list()
    for coreId in configs.keys():
        LUT = configs[coreId]['LUT']
        if len(LUT) == 0:
            offlineCores.append(coreId)
        else:
            assert len(LUT) == 60
            onlineCores.append(coreId)
    
    offlineCores.sort()
    onlineCores.sort()

    for core in offlineCores:
        genRandomFrame([core], cfile)
        genCoreFrame([core], configs, cfile)
        genParaFrame([core], configs, cfile, maxNeuronNum)
        genWeightFrame([core], configs, cfile)
    
    # partition cores
    for core in onlineCores:
        genLUTFrame([core], configs, cfile)
        genCoreFrame2([core], configs, cfile)
        genParaFrame2([core], configs, cfile)
        genWeightFrame2([core], configs, cfile)

    

    # not partition cores
    # genLUTFrame(onlineCores, configs, cfile)
    # genRandomFrame(offlineCores, cfile)
    
    # genCoreFrame2(onlineCores, configs, cfile)
    # genCoreFrame(offlineCores, configs, cfile)
    
    # genParaFrame2(onlineCores, configs, cfile)
    # genParaFrame(offlineCores, configs, cfile, maxNeuronNum)
    
    # genWeightFrame2(onlineCores, configs, cfile)
    # genWeightFrame(offlineCores, configs, cfile)

    cfile.close()

    print(f"[generate] Generate CONFIG frames in [{configPath}]")

    chipMaxTime, baseOnlineCores, lateralStars, onlineModes = analyzeConfig(configs)
        
    return offlineCores, onlineCores, chipMaxTime, baseOnlineCores, lateralStars, onlineModes

def genRandomFrame(cores, cfile):
    frames = list()
    for coreId in cores:
        frames += (['{:064b}'.format(coreId << 40)] * 3)
    if len(frames) > 0:
        cfile.write("\n".join(frames))
        cfile.write("\n")

def genCoreFrame(cores, configs, cfile):
    frames = list()
    bitBeg = [65, 61, 60, 59, 46, 45, 30, 15, 14, 10, 0]
    config2Format = 1 << 60
    mask1 = (1 << 30) - 1
    mask2 = (1 << 7) - 1
    for coreId in cores:
        config = configs[coreId]['core']
        bitVec = 0
        coreFormat = config2Format + (coreId << 40)
        for i in range(len(bitBeg)):
            bitVec += config[i] << bitBeg[i]
        frame1 = coreFormat + (bitVec >> 37)
        frame2 = coreFormat + ((bitVec >> 7) & mask1)
        frame3 = coreFormat + ((bitVec & mask2) << 23)
        frames += [
            '{:064b}'.format(frame1),
            '{:064b}'.format(frame2),
            '{:064b}'.format(frame3),
        ]
    if len(frames) > 0:
        cfile.write("\n".join(frames))
        cfile.write("\n")

def genParaFrame(cores, configs, cfile, maxNeuronNum):
    bitBeg = [206, 195, 190, 185, 180, 175, 170, 165, 163, 133, 132, 127, 126, 97, 68, 67, 66, 36, 35, 30, 0]
    dataLen = [   8, 11, 5, 5, 5, 5, 5, 5, 2, 30, 1, 5, 1, 29, 29, 1, 1, 30, 1, 5, 30]
    signedData = [0, 0,  0, 0, 0, 0, 0, 0, 0,  1, 0, 0, 0,  1,  1, 0, 0,  1, 0, 0,  1]
    config3Format = 2 << 60
    config4Format = 3 << 60
    mask = (1 << 64) - 1
    # neuronRam = 512
    # neuronRam = 4096
    neuronRam = maxNeuronNum

    for coreId in cores:
        config = configs[coreId]
        isSNN = (config['core'][2] == 0)
        neuronUnit = (1 << config['core'][0]) * (1 << config['core'][1])
        neuronNum = len(config['neuron'])
        frames = list()
        if isSNN:
            frameNum1 = int(neuronNum * 4)
            neuronUnit = 1
            frameNum2 = 0
            coreFormat1 = config3Format + (coreId << 40)
            coreFormat2 = 0
        else:

            frameNum1 = min(neuronNum * 4 // neuronUnit, neuronRam * 4)
            if neuronNum // neuronUnit > neuronRam:
                frameNum2 = math.ceil((neuronNum // neuronUnit - neuronRam) / 5) * 18
                beginPos = math.ceil(neuronNum / 8)
            else:
                frameNum2 = 0
                beginPos = 0
            coreFormat1 = config3Format + (coreId << 40)
            coreFormat2 = config4Format + (coreId << 40)
            coreFormat2 += beginPos << 20
        coreFormat = [coreFormat1, coreFormat2]
        frames = [
            ["{:064b}".format(coreFormat1 + frameNum1)], 
            ["{:064b}".format(coreFormat2 + frameNum2)]
        ]
        # input(f"{coreId}, {frameNum1} {frameNum2}")
        neuronNums = [
            0,
            int(min(neuronNum, neuronRam * neuronUnit)), 
            neuronNum
        ]
        neuronOneRam = 0
        padding = "{:064b}".format(0)
        bitVec = 0
        for j in range(2):
            for neuronId in range(neuronNums[j], neuronNums[j+1]):
                if (not isSNN) and neuronId % neuronUnit != 0:
                    continue
                para = config['neuron'][neuronId]['parameter']
                tmpBitVec = 0
                for i in range(len(bitBeg)):
                    p = para[i]
                    if p < 0:
                        p += 1 << dataLen[i]
                    tmpBitVec += p << bitBeg[i]
                if j == 0:
                    bitVec = tmpBitVec
                    for i in range(4):
                        frame = bitVec & mask
                        bitVec >>= 64
                        frames[j].append("{:064b}".format(frame))
                else:
                    bitVec = (tmpBitVec << (214 * neuronOneRam)) + bitVec
                    neuronOneRam += 1
                    if neuronOneRam == 5:
                        neuronOneRam = 0
                        for i in range(18):
                            frame = bitVec & mask
                            bitVec >>= 64
                            frames[j].append("{:064b}".format(frame))
        if neuronOneRam > 0:
            for i in range(18):
                frame = bitVec & mask
                bitVec >>= 64
                frames[1].append("{:064b}".format(frame))
        if len(frames[0]) > 1:
            cfile.write("\n".join(frames[0]) + "\n")
        if frameNum2 != 0:
            cfile.write("\n".join(frames[1]) + "\n")

def genWeightFrame(cores, configs, cfile):
    config4Format = 3 << 60
    mask = (1 << 64) - 1

    for coreId in cores:
        config = configs[coreId]
        isSNN = (config['core'][2] == 0)
        neuronNum = len(config['neuron'])
        coreFormat = config4Format + (coreId << 40)
        if not isSNN:
            frameNum = int(math.ceil(neuronNum / 8) * 18)
            frames = ["{:064b}".format(coreFormat + frameNum)]
            bitVec = 0
            for neuronId in range(neuronNum):
                weight = config['neuron'][neuronId]['weight']
                ramPos = neuronId & 7
                bitVec += int(weight[::-1], 2) << (144 * ramPos)
                if ramPos == 7:
                    for i in range(18):
                        frames.append("{:064b}".format((bitVec & mask)))
                        bitVec >>= 64
                    bitVec = 0

            if neuronNum & 7 != 0:
                for i in range(18):
                    frames.append("{:064b}".format((bitVec & mask)))
                    bitVec >>= 64
                bitVec = 0
            if len(frames) > 1:
                cfile.write("\n".join(frames) + "\n")
        else:
            frameNum = int(neuronNum * 18)
            frames = ["{:064b}".format(coreFormat + frameNum)]

            for neuronId in range(neuronNum):
                weight = config['neuron'][neuronId]['weight']
                bitVec = int(weight[::-1], 2)
                for i in range(18):
                    frames.append("{:064b}".format((bitVec & mask)))
                    bitVec >>= 64
            if len(frames) > 1:
                cfile.write("\n".join(frames) + "\n")

def genLUTFrame(cores, configs, cfile):
    frames = list()
    mask = (1 << 30) - 1
    for coreId in cores:
        bitVec = 0
        LUT = configs[coreId]['LUT']
        assert len(LUT) == 60
        coreBase = coreId << 40
        for i in range(60):
            if LUT[i] < 0:
                LUT[i] += ((1 << 8))
            bitVec = (bitVec << 8) | LUT[i]
        for j in range(480 - 30, -1,-30):
            frames.append(
                "{:064b}".format(coreBase + ((bitVec >> j) & mask))
            )
    if len(frames) > 0:
        cfile.write("\n".join(frames))
        cfile.write("\n")

def genCoreFrame2(cores, configs, cfile):
    frames = list()
    bitBeg = []
    bitBeg = [
        208, 206, 174, 166, 158, 150,
        140, 130, 125, 120, 105,  90, 
        30,   29,  27,  26,  16,   0,
    ]
    config2Format = 1 << 60
    mask = (1 << 30) - 1
    for coreId in cores:
        config = configs[coreId]['core']
        
        bitVec = 0
        coreFormat = config2Format + (coreId << 40)
        for i in range(len(bitBeg)):
            bitVec += config[i] << bitBeg[i]
        bitVec <<= 30

        for i in range(7,-1,-1):
            frames.append(
                "{:064b}".format(coreFormat | ((bitVec >> (30 * i)) & mask))
            )
        
    if len(frames) > 0:
        cfile.write("\n".join(frames))
        cfile.write("\n")

def genParaFrame2(cores, configs, cfile):

    def paraShuffle(para):
        newPara = [0 for i in range(len(para))]
        indexes = [0, 13, 9, 10, 11, 12, 7, 8, 1, 2, 3, 4, 5, 6, 14, 15]
        for i, index in enumerate(indexes):
            newPara[index] = para[i]
        return newPara 

    bitBeg1 = [
        113, 98, 91, 85, 79, 64, 61, 56,
        51 , 46, 41, 36, 31, 20, 10,  0
    ]
    bitBeg2 = [
        224, 192, 160, 128, 96, 64, 61, 56,
        51,   46,  41,  36, 31, 20, 10,  0
    ]
    dataLen1 = [
        15, 15, 7, 6, 6, 15,  3,  5,
         5,  5, 5, 5, 5, 11, 10, 10,
    ]
    dataLen2 = [
        32, 32, 32, 32, 32, 32,  3,  5,
         5,  5,  5,  5,  5, 11, 10, 10
    ]
    signedData = [
        1, 1, 1, 1, 1, 1, 0, 0, 
        0, 0, 0, 0, 0, 0, 0, 0
    ]
    config3Format = 2 << 60
    mask = (1 << 64) - 1

    for coreId in cores:
        config = configs[coreId]
        bitWidth = 1 << config['core'][0]
        neuronNum = len(config['neuron'])
        coreFormat = config3Format + (coreId << 40)

        frameNum = neuronNum * 2
        frames = [
            "{:064b}".format(coreFormat + frameNum), 
        ]
        bitVec = 0
        for neuronId in range(0, neuronNum, bitWidth):
            para = config['neuron'][neuronId]['parameter']
            bitVec = 0
            newPara = paraShuffle(para)
            if bitWidth == 1:
                for i in range(len(bitBeg1)):
                    num = newPara[i]
                    if signedData[i] and (num & (1 << (dataLen1[i]-1))):
                        num = newPara[i] + (1 << dataLen1[i])
                    bitVec += num << bitBeg1[i]
            else:
                for i in range(len(bitBeg2)):
                    num = newPara[i]
                    if signedData[i] and (num & (1 << (dataLen2[i]-1))):
                        num = newPara[i] + (1 << dataLen2[i])
                    bitVec += num << bitBeg2[i]
            if bitWidth == 1:
                for i in range(64,-1,-64):
                    val = (bitVec >> i) & mask
                    frames.append("{:064b}".format(val))
            else:
                completeNum = bitWidth // 2
                for k in range(completeNum):
                    for i in range(192, -1, -64):
                        val = (bitVec >> i) & mask
                        frames.append("{:064b}".format(val))
        if len(frames) > 1:
            i = 0
            while i < len(frames):
                num = int(frames[i],2) & ((1 << 19) - 1)
                i += num + 1
                assert num > 0, f"{i} {frames[i]}"
            assert i == len(frames), f"{i} != {len(frames)}"
            cfile.write("\n".join(frames) + "\n")

def genWeightFrame2(cores, configs, cfile):
    config4Format = 3 << 60
    mask = (1 << 64) - 1
    for coreId in cores:
        config = configs[coreId]
        neuronNum = len(config['neuron'])
        coreFormat = config4Format + (coreId << 40)    
        frameNum = int(neuronNum * 16)
        frames = ["{:064b}".format(coreFormat + frameNum)]

        for neuronId in range(neuronNum):
            weight = config['neuron'][neuronId]['weight']
            bitVec = int(weight,2)
            
            for i in range(15,-1,-1):
                frames.append("{:064b}".format(((bitVec >> (i << 6)) & mask)))
        if len(frames) > 1:
            cfile.write("\n".join(frames) + "\n")
    return


'''-----------------------------------------------------------------------'''
'''                          gen work frames                              '''
'''-----------------------------------------------------------------------'''

def genDataFrame(destinations):
    #destinations: [[globalCoreId, starId, axonId, slotId, data], ... ]
    frames = list()
    for destination in destinations:
        # frame = (9 << 60) + (chipId << 50) + maxTime
        frame = Frame.makeDataFrame(destination[0], destination[1], destination[2], destination[3], destination[4])
        frames.append(frame)
    return frames

def genNeuParaTestFrame(configs):
    frames = list()
    for testId, globalCoreId, starId, sram, frameNum in configs:
        if testId == 3:
            frame = Frame.makeTest3InFrame(globalCoreId, starId, sram, frameNum)
        elif testId == 4:
            frame = Frame.makeTest4InFrame(globalCoreId, starId, sram, frameNum)
        else:
            assert False
        frames.append(frame)
    return frames

def genSyncFrame(chipMaxTime):
    frames = list()
    for chipId, maxTime in chipMaxTime.items():
        # frame = (9 << 60) + (chipId << 50) + maxTime
        frame = Frame.makeSyncFrame(chipId, maxTime)
        frames.append(frame)
    return frames

def genInitFrame(chipMaxTime, offlineCores, hardwareType):
    frames = list()
    if hardwareType == 'v2':
        for coreId in offlineCores:
            chipId = coreId >> 10
            tmp_frames_1 =  [coreId << 40] * 3
            frame = Frame.makeInitFrame(chipId)
            tmp_frames_2 = genDataFrame([[coreId, 0, 0, 0, 0]])
            frames+=tmp_frames_1[:2]
            frames.append(frame)
            frames+=[tmp_frames_1[2], tmp_frames_2[0]]
    else:
        assert hardwareType == 'FPGA'
        for chipId in chipMaxTime.keys():
            frame = Frame.makeInitFrame(chipId)
            frames.append(frame)
    return frames

def genClearFrame(chipMaxTime):
    frames = list()
    for chipId in chipMaxTime.keys():
        # frame = (11 << 60) + (chipId << 50)
        frame = Frame.makeClearFrame(chipId)
        frames.append(frame)
    return frames

def genStartFrame(baseOnlineCores, lateralStars):
    frames = list()
    for coreId, star in zip(baseOnlineCores, lateralStars):
        frame = Frame.makeStartFrame(coreId, star)
        frames.append(frame)
    return frames

def genEndFrame(baseOnlineCores, lateralStars, onlineModes):
    frames = list()
    for coreId, star, onlineMode in zip(baseOnlineCores, lateralStars, onlineModes):
        if onlineMode:
            frame = Frame.makeEndFrame(coreId, star)
            frames.append(frame)
    return frames


'''-----------------------------------------------------------------------'''
'''               The files format files for:                             '''
'''                      1. encode data frames                            '''
'''                      1. decode data frames                            '''
'''                      1. get weight mapping                            '''
'''-----------------------------------------------------------------------'''

def genInputFormat(
    offlineCores, hardwareType, inputPos, formatDir, mapper, inputNames, 
    timeStep, chipMaxTime, baseOnlineCores, lateralStars, onlineModes
):
    frameFormats = list()
    numbers = list()

    initFrames = genInitFrame(chipMaxTime, offlineCores, hardwareType)
    frameFormats += [Frame.toString(intFrame) for intFrame in initFrames]

    # clearFrames = genClearFrame(chipMaxTime)
    # frameFormats += [Frame.toString(intFrame) for intFrame in clearFrames]

    startFrames = genStartFrame(baseOnlineCores, lateralStars)
    frameFormats += [Frame.toString(intFrame) for intFrame in startFrames]
    
    numbers.append(len(frameFormats))
    
    for name in inputNames:
        for i in range(timeStep):
            vals = inputPos[name]
            dests = vals[i]
            for posId, oneValDests in enumerate(dests):
                numbers.append(len(oneValDests))
                for dest in oneValDests:
                    # coreId = DataFrame.getCoreId(dest)
                    # starId = DataFrame.getStarId(dest)
                    # oldPayLoad = DataFrame.getPayLoad(dest)
                    coreId = Frame.getGlobalId(dest)
                    starId = Frame.getStarId(dest)
                    oldPayLoad = Frame.getPayload(dest)

                    axonId = (dest >> 16) & ((1 << 11) - 1)
                    baseCoreAddr = mapper[coreId]
                    destCores = [coreId]
                    for j in range(10):
                        if (starId >> j) & 1:
                            tmpCores = deepcopy(destCores)
                            star = 1 << j
                            for core in tmpCores:
                                destCores.append(core ^ star)
                    star = 0
                    for core in destCores:
                        assert core in mapper, f"{destCores} {starId} {coreId} {baseCoreAddr}"
                        destCoreAddr = mapper[core]
                        star |= (destCoreAddr ^ baseCoreAddr)

                    # frame = DataFrame.getFormat(oldPayLoad, baseCoreAddr, star)
                    frame = Frame.makeInputFormat(baseCoreAddr, star, oldPayLoad)
                    frameFormats.append("{:056b}".format(frame))

    syncFrames = genSyncFrame(chipMaxTime)
    # frameFormats+=["{:064b}".format(frame) for frame in syncFrames]
    frameFormats += [Frame.toString(intFrame) for intFrame in syncFrames]

    endFrames = genEndFrame(baseOnlineCores, lateralStars, onlineModes)
    frameFormats += [Frame.toString(intFrame) for intFrame in endFrames]
    numbers.append(len(syncFrames) + len(endFrames))

    with open(os.path.join(formatDir, "formats.pkl"),"wb") as f:
        pickle.dump(frameFormats, f)
    with open(os.path.join(formatDir, "numbers.pkl"),"wb") as f:
        pickle.dump(numbers, f)
    with open(os.path.join(formatDir, "inputNames.pkl"),"wb") as f:
        pickle.dump(inputNames, f)

def genOutputFormat(outputPos, formatDir, mapper):
    outputMapper = dict()
    axonBit = Hardware.getAttr("AXONBIT", True)
    chipYBit = Hardware.CHIPY
    coreYBit = Hardware.COREY
    coreBit = Hardware.COREBIT
    COREMASK = (1 << coreBit) - 1
    COREYMASK = (1 << coreYBit) - 1
    CHIPYMASK = (1 << chipYBit) - 1
    for name, infos in outputPos.items():
        for i, pos in enumerate(infos['axons']):
            gplusCoreId = Hardware.getgPlusCoreId(pos)
            axonId = Hardware.getComAxonId(pos)
            # tmp = Hardware.getAxonId(pos, 8)
            # assert axonId == tmp, f"{gplusCoreId} {axonId}, {tmp}"
            # slotId = Hardware.getSlotId(pos)
            # coreAddr = mapper[gplusCoreId]
            # fullAddr = (coreAddr << 30) + (axonId << 16) + slotId 
            fullAddr = (gplusCoreId << axonBit) + axonId
            outputMapper[fullAddr] = [name, i]
    
    outputNeurons = dict()
    for name, infos in outputPos.items():
        outputNeurons[name] = dict()
        outputNeurons[name]['LCN'] = infos['LCN']
        outputNeurons[name]['bitWidth'] = infos['bitWidth']
        outputNeurons[name]['mapping'] = dict()
        unit = infos['LCN'] * infos['bitWidth']
        assert len(infos['axons']) == len(infos['neurons'])
        for axonPos, neuronPos in zip(infos['axons'], infos['neurons']):
            gplusCoreId = Hardware.getgPlusCoreId(axonPos)
            axonId = Hardware.getComAxonId(axonPos)
            axonFullAddr = (gplusCoreId << axonBit) + axonId

            neuronId = neuronPos[1]
            gplusCoreId2 = neuronPos[0]
            phyCoreId = mapper[gplusCoreId2]
            
            neuronFullAddr = [
                [(phyCoreId >> coreBit) >> chipYBit, (phyCoreId >> coreBit) & CHIPYMASK],
                [(phyCoreId & COREMASK) >> coreYBit, (phyCoreId & COREMASK) & COREYMASK],
                int((neuronId + 1) * unit - 1)
            ]
            outputNeurons[name]['mapping'][axonFullAddr] = neuronFullAddr

    with open(os.path.join(formatDir, "mapper.txt"),"w") as f:
        json.dump(outputMapper, f, indent = 4)
    with open(os.path.join(formatDir, "outNeuronMapping.json"),"w") as f:
        json.dump(outputNeurons, f, indent = 4)
    return

def genWeightFormat(
    weightMappings, formatDir, mapper
):
    phyWeightMappings = dict()
    for opName, weightMapping in weightMappings.items():
        phyWeightMappings[opName] = dict()
        LCN = weightMapping['LCN']
        bitWidth = weightMapping['bitWidth']
        axonNum = weightMapping['axonNum']
        for neuron, neuronInfo in weightMapping['weight'].items():
            neuronId = Hardware.getNeuronId(neuronInfo[0])
            globalCoreId = Hardware.getgPlusCoreId(neuronInfo[0])
            phyCoreId = mapper[globalCoreId]
            tmpMapping = dict()
            for axon, axonPos in neuronInfo[1].items():
                LCN_id = axonPos // axonNum
                axonId = axonPos % axonNum
                tmpMapping[axon] = [neuronId, LCN_id, axonId]
            phyWeightMappings[opName][neuron] = [
                phyCoreId,
                tmpMapping
            ]
    with open(os.path.join(formatDir, "weightMapping.json"), "w") as f:
        json.dump(phyWeightMappings, f, indent=4)
    return 

def loadInfoJson(jsonPath):
    with open(jsonPath,'r') as f:
        info = json.load(f,parse_int=int)
    intInfo = {
        'localPlace':dict(),
        'relay':dict()
    }
    for localPlaceId, localPlaceConfig in info['localPlace'].items():
        intPlaceId = int(localPlaceId)
        intInfo['localPlace'][intPlaceId] = dict()
        for coreId, coreConfig in localPlaceConfig.items():
            newCoreConfig = {
                "core":[],
                "LUT":[],
                "neuron":dict()
            }

            newList = list()
            for val in coreConfig['core']:
                newList.append(int(val))
            newCoreConfig['core'] = newList

            newList2 = list()
            for val in coreConfig['LUT']:
                newList2.append(int(val))
            newCoreConfig['LUT'] = newList2

            for neuronId, neuronConfig in coreConfig['neuron'].items():
                newNeuronConfig = {
                    'parameter':list(),
                    'weight': neuronConfig['weight']
                }
                for val in neuronConfig['parameter']:
                    newNeuronConfig['parameter'].append(int(val))
                newCoreConfig['neuron'][int(neuronId)] = newNeuronConfig
            
            intInfo['localPlace'][intPlaceId][int(coreId)] = newCoreConfig
    intInfo['relay'] = dict()
    for coreId, coreConfig in info['relay'].items():
        newCoreConfig = {
            "core":[],
            "LUT": [],
            "neuron":dict()
        }

        newList = list()
        for val in coreConfig['core']:
            newList.append(int(val))
        newCoreConfig['core'] = newList

        newList2 = list()
        for val in coreConfig['LUT']:
            newList2.append(int(val))
        newCoreConfig['LUT'] = newList2

        for neuronId, neuronConfig in coreConfig['neuron'].items():
            newNeuronConfig = {
                'parameter':list(),
                'weight': neuronConfig['weight']
            }
            for val in neuronConfig['parameter']:
                newNeuronConfig['parameter'].append(int(val))
            newCoreConfig['neuron'][int(neuronId)] = newNeuronConfig
        intInfo['relay'][int(coreId)] = newCoreConfig
    
    return intInfo

def loadMapperJson(jsonPath):
    with open(jsonPath,'r') as f:
        mapper = json.load(f,parse_int=int)
    intMapper = dict()
    # bias = int("0000010000",2)
    bias = 0
    for coreId, coreAddr in mapper.items():
        intMapper[int(coreId)] = int(int(coreAddr) + bias)
    return intMapper

def loadWeightInfo(jsonPath):
    with open(jsonPath,'r') as f:
        weightInfos = json.load(f,parse_int=int)
    intInfo = dict()
    for opName, weightInfo in weightInfos.items():
        intInfo[opName] = {
            'LCN': 0,
            'bitWidth': 0,
            'axonNum': 0,
            'weight': dict()
        }
        intInfo[opName]['LCN'] = int(weightInfo['LCN'])
        intInfo[opName]['bitWidth'] = int(weightInfo['bitWidth'])
        intInfo[opName]['axonNum'] = int(weightInfo['axonNum'])
        for neuron, neuronInfo in weightInfo['weight'].items():
            tmpInfo = list()
            tmpInfo.append(int(neuronInfo[0]))
            tmpDict = dict()
            for axon, pos in neuronInfo[1].items():
                tmpDict[int(axon)] = int(pos)
            tmpInfo.append(tmpDict)
            intInfo[opName]['weight'][neuron] = tmpInfo
    return intInfo

def loadMapInfo(infoDir):
    infoPath = os.path.join(infoDir, 'info.json')
    mapperPath = os.path.join(infoDir, 'mapping_result.txt')
    weightMappingPath = os.path.join(infoDir, 'weightMapping.json')
    intInfo = loadInfoJson(infoPath)
    mapper = loadMapperJson(mapperPath)
    weightMapping = loadWeightInfo(weightMappingPath)
    return intInfo, mapper, weightMapping
